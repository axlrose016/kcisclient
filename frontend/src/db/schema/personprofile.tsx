import { sql } from "drizzle-orm";
import { integer, sqliteTable, text } from "drizzle-orm/sqlite-core";
import { modules, permissions, roles } from "./libraries";

export const personProfile = sqliteTable('person_profile', {
    id: integer('id').notNull().primaryKey(),
    cwf_category_id: integer('cwf_category_id'),
    cwf_role_id: integer('cwf_role_id'),
    cfwp_id_no: text('cfwp_id_no'),
    first_name: text('first_name'),
    middle_name: text('middle_name'),
    last_name: text('last_name'),
    extension_name: text('extension_name'),
    sex_id: integer('sex_id'),
    civil_status_id: integer('civil_status_id'),
    birthdate: text('birthdate'),
    age: integer('age'),
    no_of_children: integer('no_of_children'),
    birthplace: text('birthplace'),
    educational_attainment_id: integer('educational_attainment_id'),
    is_member_of_an_indigenous_group: integer('is_member_of_an_indigenous_group'),
    is_pantawid: integer('is_pantawid'),
    is_pantawid_leader: integer('is_pantawid_leader'),
    is_slp: integer('is_slp'),
    has_immediate_health_concern: integer('has_immediate_health_concern'),
    health_concern: text('health_concern'),
    sitio: text('sitio'),
    brgy_code: text('brgy_code'),
    cellphone_no: text('cellphone_no'),
    email: text('email'),
    current_occupation: text('current_occupation'),
    is_lgu_official: integer('is_lgu_official'),
    is_mdc: integer('is_mdc'),
    is_bdc: integer('is_bdc'),
    is_bspmc: integer('is_bspmc'),
    is_bdrrmc_bdc_twg: integer('is_bdrrmc_bdc_twg'),
    is_bdrrmc_expanded_bdrrmc: integer('is_bdrrmc_expanded_bdrrmc'),
    is_mdrrmc: integer('is_mdrrmc'),
    is_hh_head: integer('is_hh_head'),
    academe: integer('academe'),
    business: integer('business'),
    differently_abled: integer('differently_abled'),
    farmer: integer('farmer'),
    fisherfolks: integer('fisherfolks'),
    government: integer('government'),
    ip: integer('ip'),
    ip_group_id: integer('ip_group_id'),
    ngo: integer('ngo'),
    po: integer('po'),
    religious: integer('religious'),
    senior_citizen: integer('senior_citizen'),
    women: integer('women'),
    youth: integer('youth'),
    solo_parent: integer('solo_parent'),
    out_of_school_youth: integer('out_of_school_youth'),
    children_and_youth_in_need_of_special_protection: integer('children_and_youth_in_need_of_special_protection'),
    family_heads_in_need_of_assistance: integer('family_heads_in_need_of_assistance'),
    affected_by_disaster: integer('affected_by_disaster'),
    persons_with_disability: integer('persons_with_disability'),
    others_sector: text('others_sector'),
    deaf_or_hard_of_hearing: integer('deaf_or_hard_of_hearing'),
    psychosocial_disability: integer('psychosocial_disability'),
    learning_disability: integer('learning_disability'),
    intellectual_disability: integer('intellectual_disability'),
    physical_disability: integer('physical_disability'),
    cancer: integer('cancer'),
    mental_disability: integer('mental_disability'),
    speech_impairment: integer('speech_impairment'),
    rare_disease: integer('rare_disease'),
    visual_disability: integer('visual_disability'),
    multiple_disability: integer('multiple_disability'),
    other_disability: integer('other_disability'),
    school_name: text('school_name'),
    campus: text('campus'),
    school_address: text('school_address'),
    course_id: integer('course_id'),
    year_graduated: text('year_graduated'),
    year_level_id: integer('year_level_id'),
    skills: text('skills'),
    deployment_area_id: integer('deployment_area_id'),
    preffered_type_of_work_id: integer('preffered_type_of_work_id'),
    representative_last_name: text('representative_last_name'),
    representative_first_name: text('representative_first_name'),
    representative_middle_name: text('representative_middle_name'),
    representative_extension_name: text('representative_extension_name'),
    representative_sitio: text('representative_sitio'),
    representative_brgy_code: text('representative_brgy_code'),
    representative_relationship_to_beneficiary: text('representative_relationship_to_beneficiary'),
    representative_birthdate: text('representative_birthdate'),
    representative_age: text('representative_age'),
    representative_occupation: text('representative_occupation'),
    representative_monthly_salary: integer('representative_monthly_salary'),
    representative_sex_id: integer('representative_sex_id'),
    representative_contact_number: integer('representative_contact_number'),
    representative_id_card_id: integer('representative_id_card_id'),
    representative_id_card_number: integer('representative_id_card_number'),
    representative_civil_status_id: integer('representative_civil_status_id'),
    representative_health_declaration: text('representative_health_declaration'),
    date_of_first_appointment: text('date_of_first_appointment'),
    modality_id: integer('modality_id'),
    cycle_id: integer('cycle_id'),
    kc_mode_id: integer('kc_mode_id'),
    committee: text('committee'),
    position_id: integer('position_id'),
    date_start: text('date_start'),
    date_end: text('date_end'),
    training_title: text('training_title'),
    training_start: text('training_start'),
    training_end: text('training_end'),
    seminar_title: text('seminar_title'),
    seminar_to: text('seminar_to'),
    seminar_hours: integer('seminar_hours'),
    seminar_conducted_by: integer('seminar_conducted_by'),
    date_reported: text('date_reported'),
    work_name: text('work_name'),
    work_start: text('work_start'),
    work_end: text('work_end'),
    actual_cash: text('actual_cash'),
    actual_lcc: text('actual_lcc'),
    is_eligible: text('is_eligible'),
    assessment: text('assessment'),
    id_card: integer('id_card'),
    id_card_number: integer('id_card_number'),        
    created_date: text('created_date').default(sql`CURRENT_TIMESTAMP`).notNull(),
    created_by: text('created_by').notNull(),
    last_modified_date: text('last_modified_date').default(sql`CURRENT_TIMESTAMP`),
    last_modified_by: text('last_modified_by'),
    push_status_id : integer('push_status_id').default(0),
    push_date: text('push_date').default(sql`CURRENT_TIMESTAMP`),
    deleted_date: text('deleted_date').default(sql`CURRENT_TIMESTAMP`),
    deleted_by: text('deleted_by'),
    is_deleted: integer('is_deleted', {mode:'boolean'}).default(false),
    remarks: text('remarks'), 
    qrcode: text('qrcode'), //name of the file
});
 


export const review_approve = sqliteTable("review_approve", {
    id: integer("id").notNull().primaryKey(),
    record_id: integer("record_id").notNull(),
    user_id: integer("user_id").notNull(),
    modality_id: integer("modality_id").notNull(),
    module_id: integer("module_id").notNull(),
    status: text("status").default("Pending"), // review, approve, reject
    comments: text("comments"), // Optional comments    
    created_date: text("created_date").default(sql`CURRENT_TIMESTAMP`).notNull(),
    created_by: text("created_by").notNull(),
    last_modified_date: text("last_modified_date").default(sql`CURRENT_TIMESTAMP`),
    last_modified_by: text("last_modified_by"),
    push_status_id: integer("push_status_id").default(0),
    push_date: text("push_date").default(sql`CURRENT_TIMESTAMP`),
    deleted_date: text("deleted_date").default(sql`CURRENT_TIMESTAMP`),
    deleted_by: text("deleted_by"),
    is_deleted: integer("is_deleted", { mode: "boolean" }).default(false),
    remarks: text("remarks"),
});


